using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Elements : MonoBehaviour
{
    public Sprite[] Athene; //翻开的空，取自智慧之神雅典娜

    public Sprite Thor; //地雷，取自雷神托尔

    public Sprite Hodur; //黑色，取自黑暗之神霍尔德尔

    public Sprite Baldr; //白色，取自光明之神巴德尔

    public Sprite Khaos; //未翻开，取自混沌之神卡俄斯

    public GameObject resetButton;

    public static int[,] AreYouFerryMen = new int[29, 29]
    {
        { 573, 512, 112, 298, 557, 612, 848, 96, 316, 247, 639, 361, 768, 393, 736, 776, 903, 119, 301, 82, 916, 416, 844, 904, 604, 277, 705, 739, 257 },
{ 31, 445, 307, 391, 245, 23, 313, 725, 733, 3, 261, 582, 915, 592, 626, 584, 665, 927, 305, 509, 694, 368, 52, 337, 881, 423, 980, 587, 911 },
{ 327, 596, 960, 580, 605, 904, 403, 167, 737, 656, 73, 112, 304, 401, 445, 230, 982, 62, 839, 852, 138, 3, 915, 973, 866, 562, 319, 24, 745 },
{ 106, 420, 69, 630, 221, 561, 760, 278, 520, 676, 45, 69, 464, 851, 501, 601, 395, 154, 872, 816, 69, 829, 564, 971, 260, 745, 580, 418, 630 },
{ 630, 36, 354, 770, 759, 204, 45, 812, 189, 612, 913, 5, 625, 823, 451, 474, 273, 603, 669, 875, 845, 768, 182, 111, 50, 430, 953, 382, 974 },
{ 12, 961, 175, 5, 670, 259, 212, 148, 111, 780, 867, 12, 896, 885, 653, 553, 87, 92, 20, 364, 915, 213, 153, 701, 646, 944, 788, 269, 877 },
{ 309, 656, 931, 405, 205, 181, 686, 166, 859, 352, 18, 524, 892, 248, 630, 627, 498, 746, 581, 523, 743, 968, 44, 188, 864, 757, 564, 948, 47 },
{ 692, 223, 814, 190, 50, 369, 70, 713, 232, 343, 555, 787, 326, 851, 51, 444, 885, 451, 149, 985, 475, 254, 299, 700, 84, 576, 967, 950, 431 },
{ 160, 983, 978, 87, 688, 716, 676, 51, 85, 959, 818, 209, 993, 661, 298, 718, 549, 477, 580, 304, 314, 527, 41, 784, 465, 152, 876, 202, 657 },
{ 587, 959, 903, 570, 706, 2, 533, 872, 773, 776, 293, 538, 666, 170, 894, 547, 29, 344, 96, 137, 690, 220, 635, 100, 921, 754, 65, 697, 529 },
{ 654, 217, 952, 873, 308, 45, 458, 11, 229, 423, 23, 505, 424, 159, 535, 188, 960, 832, 727, 763, 341, 12, 991, 521, 901, 301, 889, 907, 372 },
{ 694, 84, 984, 34, 393, 699, 441, 340, 18, 144, 130, 317, 747, 356, 458, 487, 249, 771, 400, 460, 704, 219, 758, 330, 395, 70, 675, 399, 326 },
{ 265, 691, 144, 959, 116, 242, 560, 58, 802, 162, 864, 892, 299, 240, 466, 98, 593, 893, 754, 844, 527, 116, 719, 20, 449, 631, 582, 227, 528 },
{ 31, 336, 102, 852, 436, 941, 900, 399, 673, 553, 372, 207, 700, 846, 492, 484, 157, 418, 365, 420, 636, 715, 206, 739, 24, 864, 357, 575, 94 },
{ 761, 405, 795, 574, 114, 85, 937, 860, 564, 237, 430, 517, 412, 863, 825, 744, 648, 787, 76, 568, 767, 570, 798, 303, 17, 48, 159, 453, 567 },
{ 892, 30, 41, 228, 274, 496, 464, 444, 27, 850, 940, 276, 211, 752, 726, 82, 355, 303, 238, 862, 31, 640, 338, 113, 267, 422, 230, 772, 66 },
{ 963, 139, 45, 400, 981, 467, 270, 928, 839, 268, 350, 352, 421, 907, 501, 436, 871, 586, 818, 272, 562, 917, 238, 626, 795, 738, 366, 375, 958 },
{ 848, 949, 869, 910, 225, 825, 952, 798, 618, 103, 913, 151, 426, 401, 476, 683, 321, 359, 817, 337, 796, 188, 638, 490, 542, 458, 491, 812, 145 },
{ 520, 181, 108, 773, 283, 351, 649, 264, 515, 990, 887, 231, 640, 452, 114, 555, 244, 719, 939, 464, 595, 403, 592, 994, 304, 309, 478, 129, 129 },
{ 457, 314, 878, 111, 735, 9, 486, 134, 785, 413, 143, 732, 553, 393, 369, 184, 753, 294, 143, 304, 466, 231, 173, 952, 528, 961, 925, 55, 974 },
{ 656, 717, 556, 110, 46, 130, 985, 756, 69, 419, 559, 964, 319, 231, 171, 209, 660, 585, 735, 7, 612, 853, 83, 699, 333, 547, 334, 906, 359 },
{ 740, 944, 383, 654, 906, 202, 713, 872, 501, 0, 956, 968, 563, 309, 359, 610, 231, 840, 662, 840, 454, 758, 88, 644, 222, 863, 932, 759, 936 },
{ 38, 767, 585, 999, 251, 657, 305, 249, 459, 746, 544, 998, 627, 719, 586, 935, 760, 425, 645, 560, 291, 448, 516, 345, 107, 83, 550, 961, 236 },
{ 347, 291, 252, 590, 25, 558, 904, 33, 749, 249, 162, 416, 905, 630, 502, 115, 725, 306, 574, 521, 68, 135, 202, 389, 167, 314, 881, 569, 296 },
{ 73, 887, 104, 658, 681, 896, 681, 343, 551, 293, 425, 674, 558, 12, 319, 102, 585, 68, 22, 486, 249, 9, 895, 407, 681, 852, 541, 787, 824 },
{ 711, 621, 479, 150, 760, 453, 407, 419, 596, 388, 297, 957, 414, 643, 47, 344, 960, 883, 233, 290, 625, 686, 114, 39, 327, 42, 242, 467, 79 },
{ 468, 804, 607, 275, 905, 368, 766, 979, 507, 276, 495, 263, 25, 447, 285, 692, 912, 86, 686, 957, 209, 570, 137, 276, 59, 785, 36, 873, 123 },
{ 661, 333, 858, 432, 618, 31, 268, 292, 147, 95, 585, 872, 472, 407, 442, 831, 801, 170, 886, 535, 302, 633, 212, 99, 209, 246, 766, 332, 44 },
{ 104, 551, 456, 128, 702, 806, 11, 925, 127, 179, 510, 217, 593, 489, 398, 339, 849, 92, 439, 119, 130, 470, 128, 111, 41, 957, 280, 623, 249 }
    };

    public static int[,] MayWorldBeAtPeace = new int[29, 29]
    {
        { 2107, 2054, 2678, 2860, 2091, 2146, 2390, 137, 2874, 30, 2169, 384, 2310, 2959, 2278, 993, 878, 158, 452, 187, 2450, 329, 2378, 2446, 2138, 2835, 2247, 2277, 2823 },
{ 2585, 340, 474, 366, 28, 254, 2879, 572, 564, 2565, 2819, 687, 890, 2134, 667, 673, 624, 886, 472, 3067, 2224, 409, 2610, 440, 920, 334, 829, 674, 2441 },
{ 2881, 701, 2502, 2114, 2139, 865, 2965, 78, 520, 2198, 2639, 2678, 473, 376, 3003, 15, 831, 215, 2369, 957, 2700, 234, 2453, 804, 2404, 2100, 2873, 241, 2287 },
{ 2668, 333, 2627, 2160, 2779, 728, 2302, 511, 2062, 589, 196, 172, 3030, 2389, 284, 688, 2957, 115, 897, 2358, 2627, 980, 2098, 802, 2818, 2287, 2114, 331, 2160 },
{ 2160, 205, 2916, 2308, 2289, 37, 2603, 965, 84, 653, 888, 2563, 664, 2353, 298, 307, 2839, 2141, 2203, 2413, 2379, 1001, 2736, 134, 2612, 2984, 2495, 407, 2504 },
{ 2570, 808, 70, 236, 631, 490, 2770, 125, 134, 2314, 2405, 229, 873, 924, 2187, 704, 190, 181, 2578, 2922, 890, 60, 2719, 596, 623, 857, 1021, 484, 2411 },
{ 2867, 2198, 2469, 2963, 2763, 2739, 2216, 79, 2397, 393, 2580, 741, 2426, 17, 2160, 666, 3060, 515, 2115, 738, 2273, 801, 2602, 2746, 2406, 2291, 2098, 2482, 2601 },
{ 605, 54, 967, 87, 219, 408, 175, 544, 1, 446, 706, 2325, 2880, 954, 218, 3002, 924, 298, 124, 2527, 306, 23, 450, 597, 189, 681, 814, 863, 326 },
{ 73, 830, 2516, 190, 2230, 2250, 2210, 218, 2643, 2489, 987, 2775, 776, 2195, 2860, 551, 716, 308, 685, 473, 2876, 2057, 192, 1017, 312, 2718, 901, 35, 2199 },
{ 674, 854, 2433, 723, 555, 235, 764, 897, 2307, 993, 460, 755, 627, 67, 919, 2085, 244, 2910, 137, 2703, 2228, 53, 2173, 2658, 880, 539, 2631, 592, 2071 },
{ 2184, 2783, 849, 2415, 477, 2603, 3020, 226, 12, 2977, 254, 272, 321, 2713, 2065, 85, 2502, 2374, 2257, 2301, 2899, 2570, 822, 736, 876, 452, 912, 2445, 2930 },
{ 607, 189, 2526, 203, 2959, 2237, 336, 2898, 251, 2710, 107, 468, 2285, 397, 3020, 3041, 16, 2309, 2966, 293, 2246, 50, 2288, 2892, 2957, 2624, 586, 2953, 431 },
{ 2831, 2229, 2710, 2489, 157, 27, 2102, 211, 2340, 75, 2406, 2426, 2861, 25, 315, 2660, 2135, 916, 539, 2378, 742, 157, 2249, 253, 296, 670, 687, 10, 761 },
{ 246, 441, 143, 2386, 2994, 836, 877, 358, 584, 2095, 2930, 2761, 2234, 935, 261, 269, 116, 2980, 388, 333, 661, 2253, 2760, 2277, 241, 905, 396, 2105, 2648 },
{ 528, 2963, 2333, 2104, 2676, 188, 2479, 949, 2098, 2795, 2984, 2051, 2970, 950, 976, 2286, 609, 1018, 2634, 721, 2297, 2108, 2328, 454, 248, 217, 2713, 3011, 2097 },
{ 917, 247, 192, 2786, 507, 3062, 313, 341, 242, 2388, 837, 2834, 2773, 2294, 575, 187, 394, 454, 7, 951, 246, 617, 2900, 2679, 2829, 335, 15, 1005, 2628 },
{ 810, 2701, 196, 377, 2515, 314, 2824, 2470, 942, 2826, 2904, 393, 332, 866, 3059, 2994, 910, 2124, 2356, 505, 2100, 2451, 2792, 667, 2333, 2276, 391, 414, 2488 },
{ 953, 860, 2403, 2440, 8, 2367, 849, 1015, 643, 142, 888, 2705, 323, 376, 3034, 578, 2887, 2913, 984, 2903, 1013, 2746, 2168, 259, 759, 291, 3053, 2346, 2711 },
{ 2062, 92, 133, 2307, 2845, 438, 2191, 2830, 746, 2520, 2417, 2785, 617, 3010, 155, 706, 29, 2249, 834, 313, 698, 2965, 697, 2532, 2870, 2867, 311, 2695, 2695 },
{ 288, 2876, 903, 134, 566, 2575, 271, 111, 2327, 372, 2697, 565, 2095, 352, 408, 2750, 2295, 463, 102, 2870, 3028, 14, 2731, 849, 761, 808, 884, 222, 807 },
{ 2198, 548, 709, 135, 2600, 2692, 2527, 2290, 172, 330, 2089, 813, 470, 14, 66, 2775, 2194, 672, 566, 238, 2146, 2387, 2645, 2237, 2891, 714, 2888, 2444, 2913 },
{ 525, 857, 406, 615, 867, 35, 544, 897, 3059, 233, 2490, 2510, 730, 2867, 2913, 651, 2785, 929, 639, 929, 3008, 543, 177, 621, 2776, 950, 845, 2289, 2478 },
{ 2592, 2297, 2127, 2529, 2813, 2199, 2871, 16, 290, 515, 713, 783, 666, 2249, 2124, 846, 2302, 2991, 2179, 2102, 2853, 297, 2050, 432, 2669, 186, 2080, 2503, 2794 },
{ 2909, 458, 21, 679, 240, 711, 2446, 200, 2283, 16, 75, 2982, 864, 2160, 3056, 154, 2259, 475, 2104, 736, 2626, 110, 35, 364, 2721, 467, 920, 2111, 2862 },
{ 2639, 926, 2670, 2196, 2223, 873, 2223, 446, 2081, 2851, 320, 587, 2088, 2570, 2873, 143, 672, 173, 255, 271, 2815, 2575, 2425, 2961, 2223, 2386, 756, 2325, 977 },
{ 2241, 644, 3033, 2704, 2302, 300, 2961, 330, 701, 365, 448, 2491, 375, 2181, 198, 433, 2502, 2421, 2799, 459, 664, 583, 155, 206, 2881, 195, 27, 314, 166 },
{ 3026, 973, 2137, 2837, 2447, 409, 2296, 826, 3069, 2834, 262, 2817, 2591, 342, 500, 605, 2454, 191, 583, 852, 2775, 2108, 96, 509, 2621, 1016, 205, 896, 2685 },
{ 2195, 420, 947, 345, 643, 246, 2826, 461, 122, 2649, 672, 2414, 3038, 2961, 339, 982, 968, 2732, 2416, 766, 455, 656, 61, 2661, 56, 31, 535, 2890, 197 },
{ 2670, 2081, 3022, 2694, 2232, 2336, 2573, 884, 150, 90, 279, 2783, 2135, 256, 359, 2901, 952, 181, 350, 2673, 2692, 319, 2694, 134, 2607, 852, 497, 2153, 2815 }
    };

    public bool bIsMine = false;

    public bool bIsOpen = false;

    void Awake()
    {   
        int x = (int)transform.position.x;
        int y = (int)transform.position.y;
        //根据全局的数组设置该格子是雷还是空地
        bIsMine = (((MayWorldBeAtPeace[x, y] ^ AreYouFerryMen[x, y]) - 233) / 2333) == 1 ? true : false;
        //根据格子的position，将物体实例绑定到网格中
        Grids._instance.eleGrids[(int)transform.position.x, (int)transform.position.y] = this;
        //网格中对应格子数值设置
        Grids._instance.DevilsInHeaven[(int)transform.position.x, (int)transform.position.y] = (bIsMine == true ? 1 : 0);
        //隐藏reset按钮
        resetButton = GameObject.FindGameObjectWithTag("resetButton");
        if (resetButton)
            resetButton.SetActive(false);
    }

    // Start is called before the first frame update
    void Start()
    {
        //初始化时混淆地图
        Grids._instance.ChangeMap();
        //测试用
        //DawnsLight();
    }

    public void SafeAndThunder(int adjcent)
    {
        //显示图片，如果是雷就加载地雷图片，否则加载周围雷的个数的数字
        if (bIsMine)
        {
            GetComponent<SpriteRenderer>().sprite = Thor;
        }
        else
        {
            GetComponent<SpriteRenderer>().sprite = Athene[adjcent];
        }
    }

    public void DawnsLight()
    {   
        //翻开所有格子，显示黑白二维码
        if (bIsMine)
        {
            GetComponent<SpriteRenderer>().sprite = Hodur;
        }
        else
        {
            GetComponent<SpriteRenderer>().sprite = Baldr;
        }
    }

    public void LayersOfFear()
    {
        //将所有的格子都设置成未翻开状态
        GetComponent<SpriteRenderer>().sprite = Khaos;
    }

    void OnMouseUpAsButton()
    {
        //鼠标点击对应格子触发
        if (!Grids._instance.bGameEnd && !bIsOpen)
        {   //未翻开
            //设置翻开
            bIsOpen = true;
            int nX = (int)transform.position.x;
            int nY = (int)transform.position.y;
            if (bIsMine)
            {
                //显示雷
                SafeAndThunder(0);
                Grids._instance.bGameEnd = true;
                //游戏失败
                Grids._instance.GameLose();
                print("game over: lose");
            }
            else
            {
                //翻到的不是雷，显示周围雷的数量+翻开相邻的周围无雷的格子
                int adjcentNum = Grids._instance.CountAdjcentNum(nX, nY);
                SafeAndThunder(adjcentNum);
                Grids._instance.Flush(nX, nY, new bool[Grids.w, Grids.h]);
            }
            if (Grids._instance.GameWin())
            {
                //游戏胜利
                Grids._instance.bGameEnd = true;
                print("game over: win");
            }
        }
    }
}
