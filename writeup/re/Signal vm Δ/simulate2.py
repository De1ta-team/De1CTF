# python3
from struct import pack
code = []
jmp_map = {}
with open("./assembly.txt") as f:
    i = 0
    for lines in f:
        code.append(lines[16:].strip())
        if lines.startswith("loc_"):
            tmp = lines.index(':')
            jmp_map[lines[:tmp]] = i
        i += 1
ip = 0
reg = [0] * 10

memory = [0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
  0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ] + [0]*0x100 + [0x7E, 0x74, 
  0x44, 0x72, 0x43, 0x24, 0x35, 0x69, 0x21, 0x3D, 0x25, 0x4E, 
  0x61, 0x71, 0x6C, 0x58, 0x7A, 0x5D, 0x6E, 0x34, 0x5F, 0x75, 
  0x6C, 0x6B, 0x41, 0x67, 0x5E, 0x64, 0x39, 0x37, 0x4E, 0x67, 
  0x6C, 0x2D, 0x66, 0x47, 0x6F, 0x29, 0x7A, 0x72, 0x59, 0x65, 
  0x2C, 0x69, 0x55, 0x30, 0x49, 0x62, 0x55, 0x1D, 0x7E, 0x59, 
  0x42, 0x3A, 0x24, 0x53, 0x3D, 0x3E, 0x50, 0x69, 0x3A, 0x69, 
  0x2D, 0x75, 0x78, 0x2A, 0x69, 0x50, 0x1F, 0x30, 0x6F, 0x78, 
  0x73, 0x28, 0x7C, 0x26, 0x40, 0x4E, 0x48, 0x1E, 0x6C, 0x6A, 
  0x20, 0x2D, 0x69, 0x7E, 0x28, 0x37, 0x5A, 0x19, 0x7A, 0x42, 
  0x72, 0x7B, 0x37, 0x1E, 0x41, 0x45, 0x2C, 0x61, 0x72, 0x55, 
  0x22, 0x31, 0x54, 0x21, 0x2C, 0x4E, 0x2C, 0x22, 0x78, 0x24, 
  0x22, 0x66, 0x7E, 0x7A, 0x69, 0x72, 0x23, 0x50, 0x5E, 0x5D, 
  0x56, 0x57, 0x10, 0x61, 0x79, 0x5C, 0x52, 0x68, 0x70, 0x3D, 
  0x36, 0x50, 0x69, 0x37, 0x67, 0x43, 0x44, 0x1F, 0x72, 0x2B, 
  0x24, 0x45, 0x66, 0x60, 0x32, 0x6F, 0x39, 0x57, 0x25, 0x6A, 
  0x72, 0x27, 0x25, 0x47, 0x35, 0x30, 0x3F, 0x3B, 0x6F, 0x7D, 
  0x57, 0x28, 0x27, 0x6C, 0x2B, 0x5A, 0x3A, 0x76, 0x3E, 0x61, 
  0x42, 0x21, 0x20, 0x52, 0x36, 0x41, 0x4B, 0x37, 0x31, 0x3D, 
  0x3E, 0x79, 0x59, 0x2A, 0x29, 0x79, 0x74, 0x71, 0x5D, 0x53, 
  0x5F, 0x6F, 0x7B, 0x30, 0x3D, 0x3D, 0x3D, 0x6C, 0x59, 0x43, 
  0x67, 0x51, 0x59, 0x20, 0x7D, 0x1E, 0x1D, 0x57, 0x41, 0x74, 
  0x49, 0x40, 0x18, 0x51, 0x3D, 0x50, 0x3F, 0x29, 0x61, 0x35, 
  0x1D, 0x6F, 0x48, 0x28, 0x3A, 0x58, 0x6E, 0x64, 0x4A, 0x3F, 
  0x25, 0x5A, 0x7B, 0x57, 0x4C, 0x44, 0x20, 0x40, 0x45, 0x29, 
  0x55, 0x6F, 0x6E, 0x22, 0x2C, 0x24, 0x46, 0x20, 0x46, 0x21, 
  0x56, 0x5D, 0x54, 0x72, 0x54, 0x58, 0x37, 0x40, 0x4E, 0x6F, 
  0x64, 0x6A, 0x2A, 0x42, 0x7E, 0x2F, 0x72, 0x46, 0x42, 0x26, 
  0x71, 0x68, 0x65, 0x2D, 0x51, 0x45, 0x20, 0x6A, 0x39, 0x4C, 
  0x2D, 0x64, 0x49, 0x40, 0x4D, 0x1D, 0x48, 0x24, 0x64, 0x4F, 
  0x36, 0x7A, 0x36, 0x5C, 0x2E, 0x48, 0x35, 0x48, 0x62, 0x42, 
  0x2C, 0x69, 0x67, 0x38, 0x4F, 0x75, 0x2D, 0x4B, 0x69, 0x2E, 
  0x3E, 0x59, 0x65, 0x2D, 0x32, 0x5C, 0x78, 0x70, 0x4C, 0x3C, 
  0x66, 0x24, 0x1D, 0x3C, 0x33, 0x4A, 0x58, 0x57, 0x52, 0x3B, 
  0x5F, 0x54, 0x52, 0x76, 0x51, 0x49, 0x54, 0x22, 0x31, 0x24, 
  0x4F, 0x6B, 0x24, 0x33, 0x34, 0x49, 0x69, 0x6A, 0x20, 0x77, 
  0x24, 0x28, 0x52, 0x25, 0x5E, 0x35, 0x69, 0x67, 0x6D, 0x5A, 
  0x4C, 0x4E, 0x3A, 0x33, 0x63, 0x20, 0x54, 0x22, 0x51, 0x60, 
  0x30, 0x5E, 0x46, 0x2C, 0x5A, 0x27, 0x33, 0x56, 0x21, 0x23, 
  0x7D, 0x65, 0x5D, 0x35, 0x58, 0x57, 0x28, 0x21, 0x24, 0x24, 
  0x33, 0x39, 0x74, 0x23, 0x22, 0x61, 0x63, 0x61, 0x38, 0x75, 
  0x26, 0x6D, 0x44, 0x3D, 0x5D, 0x6D, 0x5E, 0x1F, 0x3F, 0x57, 
  0x77, 0x68, 0x76, 0x70, 0x59, 0x4C, 0x56, 0x58, 0x39, 0x6E, 
  0x39, 0x66, 0x35, 0x44, 0x74, 0x1F, 0x50, 0x31, 0x6E, 0x44, 
  0x24, 0x65, 0x75, 0x4B, 0x37, 0x35, 0x40, 0x37, 0x4F, 0x68, 
  0x35, 0x4E, 0x3B, 0x2D, 0x7D, 0x6A, 0x3F, 0x59, 0x28, 0x2C, 
  0x7B, 0x2E, 0x51, 0x74, 0x38, 0x64, 0x5F, 0x45, 0x29, 0x23, 
  0x2B, 0x61, 0x40, 0x40, 0x57, 0x60, 0x61, 0x63, 0x62, 0x24, 
  0x56, 0x28, 0x57, 0x41, 0x28, 0x54, 0x3F, 0x24, 0x39, 0x46, 
  0x6E, 0x39, 0x42, 0x2A, 0x1D, 0x47, 0x64, 0x20, 0x64, 0x35, 
  0x5A, 0x53, 0x71, 0x27, 0x52, 0x52, 0x70, 0x4D, 0x59, 0x21, 
  0x6F, 0x68, 0x37, 0x70, 0x1E, 0x30, 0x36, 0x31, 0x2E, 0x35, 
  0x6D, 0x2C, 0x6F, 0x1F, 0x28, 0x22, 0x70, 0x29, 0x1C, 0x2A, 
  0x61, 0x56, 0x74, 0x7A, 0x25, 0x2E, 0x1F, 0x24, 0x3A, 0x77, 
  0x76, 0x41, 0x77, 0x71, 0x7D, 0x66, 0x30, 0x20, 0x5B, 0x45, 
  0x59, 0x6F, 0x3F, 0x2F, 0x64, 0x7E, 0x30, 0x32, 0x31, 0x48, 
  0x35, 0x6A, 0x34, 0x48, 0x70, 0x50, 0x1E, 0x46, 0x31, 0x66, 
  0x5A, 0x1D, 0x4C, 0x29, 0x27, 0xA6, 0x29, 0x57, 0x69, 0x77, 
  0x2B, 0x47, 0x6D, 0x41, 0x39, 0x63, 0x26, 0x49, 0x4F, 0x6E, 
  0x36, 0x23, 0x5C, 0x69, 0x1E, 0x70, 0x44, 0x54, 0x6A, 0x42, 
  0x4F, 0x3C, 0x4B, 0x69, 0x36, 0x53, 0x53, 0x42, 0x28, 0x2E, 
  0x46, 0x71, 0x63, 0x55, 0x7A, 0x42, 0x22, 0x1F, 0x3D, 0x30, 
  0x7D, 0x42, 0x2A, 0x22, 0x33, 0x74, 0x60, 0x6F, 0x49, 0x40, 
  0x54, 0x56, 0x3E, 0x56, 0x4D, 0x35, 0x2A, 0x78, 0x45, 0x74, 
  0x3F, 0x36, 0x69, 0x76, 0x33, 0x26, 0x2C, 0x44, 0x20, 0x79, 
  0x22, 0x60, 0x4E, 0x7B, 0x1E, 0x7B, 0x4A, 0x75, 0x30, 0x48, 
  0x33, 0x2F, 0x4D, 0x53, 0x25, 0x3B, 0x3F, 0x4C, 0x1F, 0x50, 
  0x70, 0x77, 0x34, 0x5C, 0x4F, 0x24, 0x58, 0x39, 0x58, 0x7C, 
  0x5D, 0x30, 0x7B, 0x77, 0x7D, 0x75, 0x21, 0x3D, 0x7B, 0x57, 
  0x3B, 0x60, 0x5F, 0x3C, 0x66, 0x6F, 0x2D, 0x64, 0x62, 0x4D, 
  0x6F, 0x5A, 0x1E, 0x1E, 0x2E, 0x26, 0x37, 0x45, 0x66, 0x48, 
  0x48, 0x58, 0x3A, 0x58, 0x5F, 0x7B, 0x3D, 0x4C, 0x42, 0x20, 
  0x62, 0x67, 0x56, 0x59, 0x5E, 0x21, 0x4A, 0x7B, 0x30, 0x3D, 
  0x30, 0x3B, 0x4A, 0x4F, 0x22, 0x7E, 0x57, 0x45, 0x63, 0x79, 
  0x53, 0x42, 0x4B, 0x6F, 0x43, 0x79, 0x72, 0x6D, 0x49, 0x1C, 
  0x2F, 0x57, 0x29, 0x2C, 0x41, 0x35, 0x69, 0x5D, 0x6C, 0x48, 
  0x7A, 0x2D, 0x4E, 0x7D, 0x6C, 0x4B, 0x2B, 0x50, 0x73, 0x40, 
  0x4F, 0x60, 0x2C, 0x27, 0x37, 0x31, 0x3D, 0x7D, 0x2F, 0x51, 
  0x36, 0x64, 0x58, 0x53, 0x5A, 0x57, 0x3D, 0x5A, 0x78, 0x45, 
  0x79, 0x6E, 0x4A, 0x58, 0x36, 0x4E, 0x6A, 0x6A, 0x48, 0x1C, 
  0x47, 0x64, 0x3A, 0x61, 0x6E, 0x45, 0x73, 0x34, 0x50, 0x4E, 
  0x39, 0x2A, 0x20, 0x30, 0x6B, 0x47, 0x58, 0x6F, 0x27, 0x68, 
  0x1D, 0x59, 0x1D, 0x5C, 0x79, 0x45, 0x29, 0x79, 0x3B, 0x64, 
  0x24, 0x5E, 0x5F, 0x38, 0x65, 0x7D, 0x25, 0x2E, 0x70, 0x4B, 
  0x41, 0x3A, 0x70, 0x5E, 0x50, 0x78, 0x78, 0x68, 0x4A, 0x5E, 
  0x42, 0x63, 0x79, 0x7E, 0x2D, 0x46, 0x68, 0x43, 0x69, 0x3B, 
  0x38, 0x56, 0x33, 0x21, 0x1D, 0x6E, 0x4D, 0x57, 0x5D, 0x3B, 
  0x1C, 0x47, 0x39, 0x2B, 0x4E, 0x2A, 0x6C, 0x7D, 0x2A, 0x25, 
  0x59, 0x71, 0x6A, 0x4D, 0x59, 0x48, 0x57, 0x61, 0x41, 0x3A, 
  0x70, 0x5C, 0x58, 0x5B, 0x21, 0x63, 0x24, 0x29, 0x31, 0x53, 
  0x46, 0x24, 0x4B, 0x5D, 0x60, 0x6E, 0x76, 0x57, 0x43, 0x3F, 
  0x58, 0x77, 0x4B, 0x31, 0x62, 0x2A, 0x7A, 0x5B, 0x46, 0x1C, 
  0x2B, 0x79, 0x1D, 0x4A, 0x2E, 0x2C, 0x60, 0x26, 0x55, 0x7C, 
  0x53, 0x74, 0x3A, 0x68, 0x48, 0x5E, 0x7B, 0x27, 0x34, 0x23, 
  0x2F, 0x3F, 0x4A, 0x6C, 0x47, 0x4D, 0x5B, 0x5F, 0x70, 0x43, 
  0x6C, 0x70, 0x4F, 0x24, 0x76, 0x3E, 0x77, 0x48, 0x3B, 0x6F, 
  0x59, 0x2A, 0x2E, 0x5B, 0x30, 0x5D, 0x21, 0x1C, 0x4F, 0x6B, 
  0x59, 0x56, 0x27, 0x34, 0x73, 0x37, 0x76, 0x4D, 0x43, 0x2B, 
  0x31, 0x41, 0x6C, 0x6A, 0x72, 0x4E, 0x30, 0x68, 0x65, 0x68, 
  0x22, 0x45, 0x41, 0x45, 0x65, 0x6E, 0x1D, 0x20, 0x49, 0x2E, 
  0x68, 0x5D, 0x33, 0x2D, 0x20, 0x3B, 0x1D, 0x6F, 0x3A, 0x7E, 
  0x77, 0x55, 0x7B, 0x63, 0x76, 0x3F, 0x59, 0x3A, 0x52, 0x38, 
  0x50, 0x45, 0x27, 0x40, 0x35, 0x55, 0x63, 0x4A, 0x5D, 0x2E, 
  0x6D, 0x66, 0x27, 0x4B, 0x33, 0x72, 0x76, 0x70, 0x1D, 0x22, 
  0x1E, 0x67, 0x71, 0x7E, 0x7D, 0x6F, 0x78, 0x22, 0x2C, 0x3C, 
  0x58, 0x77, 0x2F, 0x5D, 0x57, 0x33, 0x5D, 0x43, 0x39, 0x5E, 
  0x20, 0x40, 0x38, 0x33, 0x7B, 0x1E, 0x36, 0x61, 0x59, 0x28, 
  0x1F, 0x48, 0x75, 0x56, 0x73, 0x46, 0x2F, 0x5D, 0x2A, 0x49, 
  0x77, 0x39, 0x1F, 0x62, 0x5D, 0x69, 0x61, 0x50, 0x7E, 0x5E, 
  0x57, 0x41, 0x21, 0x73, 0x1F, 0x2C, 0x63, 0x25, 0x7E, 0x62, 
  0x22, 0x45, 0x34, 0x51, 0x20, 0x35, 0x5B, 0x76, 0x4D, 0x48, 
  0x62, 0x21, 0x39, 0x5E, 0x4B, 0x60, 0x6D, 0x23, 0x53, 0x6C, 
  0x5E, 0x2D, 0x49, 0x5D, 0x5A, 0x1C, 0x2F, 0x23, 0x6B, 0x4A, 
  0x22, 0x76, 0x2B, 0x1E, 0x6A, 0x72, 0x2D, 0x51, 0x69, 0x4C, 
  0x6B, 0x4B, 0x68, 0x43, 0x5F, 0x32, 0x57, 0x73, 0x55, 0x6B, 
  0x3C, 0x54, 0x26, 0x60, 0x52, 0x50, 0x5B, 0x1D, 0x79, 0x4C, 
  0x57, 0x77, 0x2B, 0x3E, 0x6C, 0x30, 0x24, 0x34, 0x27, 0x33, 
  0x7B, 0x2D, 0x1D, 0x20, 0x4C, 0x1E, 0x4D, 0x68, 0x21, 0x3B, 
  0x6F, 0x36, 0x2D, 0x41, 0x5F, 0x1C, 0x4D, 0x1F, 0x4F, 0x30, 
  0x45, 0x79, 0x50, 0x33, 0x74, 0x20, 0x77, 0x35, 0x4F, 0x3F, 
  0x5F, 0x26, 0x70, 0x1C, 0x1F, 0x45, 0x1D, 0x48, 0x2A, 0x21, 
  0x4D, 0x1F, 0x50, 0x29, 0x34, 0x17, 0x37, 0x73, 0x20, 0x30, 
  0x5E, 0x6F, 0x6A, 0x7C, 0x25, 0x2F, 0x7A, 0x1F, 0x43, 0x49, 
  0x1D, 0x55, 0x72, 0x79, 0x25, 0x1D, 0x69, 0x73, 0x4F, 0x30, 
  0x1E, 0x73, 0x57, 0x21, 0x50, 0x4C, 0x62, 0x2F, 0x76, 0x27, 
  0x5C, 0x22, 0x4C, 0x30, 0x31, 0x26, 0x44, 0x55, 0x21, 0x3F, 
  0x2B, 0x24, 0x4B, 0x2C, 0x20, 0x33, 0x3F, 0x32, 0x2A, 0x63, 
  0x2B, 0x6F, 0x53, 0x1D, 0x20, 0x46, 0x67, 0x6C, 0x62, 0x38, 
  0x42, 0x4C, 0x2C, 0x5B, 0x42, 0x56, 0x6F, 0x71, 0x2B, 0x2C, 
  0x5D, 0x1E, 0x24, 0x46, 0x21, 0x5B, 0x2D, 0x5A, 0x38, 0x5F, 
  0x21, 0x32, 0x22, 0x72, 0x29, 0x35, 0x3E, 0x2C, 0x27, 0x7D, 
  0x44, 0x50, 0x5B, 0x69, 0x2D, 0x7E, 0x36, 0x37, 0x6F, 0x6B, 
  0x5E, 0x66, 0x59, 0x25, 0x26, 0x67, 0x75, 0x51, 0x22, 0x20, 
  0x51, 0x44, 0x42, 0x5D, 0x46, 0x6E, 0x2D, 0x40, 0x3B, 0x3A, 
  0x4F, 0x38, 0x7A, 0x4A, 0x23, 0x67, 0x3E, 0x26, 0x1F, 0x50, 
  0x3E, 0x46, 0x3D, 0x24, 0x4F, 0x54, 0x27, 0x3F, 0x2F, 0x42, 
  0x43, 0x52, 0x69, 0x47, 0x22, 0x3A, 0x33, 0x24, 0x23, 0x2A, 
  0x53, 0x73, 0x71, 0x1C, 0x4F, 0x59, 0x25, 0x33, 0x3B, 0x20, 
  0x57, 0x5C, 0x50, 0x37, 0x54, 0x7E, 0x1E, 0x4D, 0x1E, 0x4F, 
  0x22, 0x64, 0x4C, 0x77, 0x5D, 0x6B, 0x1C, 0x49, 0x23, 0x5E, 
  0x34, 0x3F, 0x64, 0x78, 0x22, 0x45, 0x34, 0x50, 0x28, 0x7B, 
  0x67, 0x6E, 0x72, 0x75, 0x51, 0x74, 0x69, 0x31, 0x69, 0x76, 
  0x64, 0x4E, 0x60, 0x24, 0x6A, 0x79, 0x6E, 0x50, 0x24, 0x43, 
  0x60, 0x59, 0x25, 0x6A, 0x4C, 0x4A, 0x1E, 0x6C, 0x39, 0x62, 
  0x51, 0x64, 0x3C, 0x4E, 0x67, 0x56, 0x51, 0x6A, 0x40, 0x53, 
  0x48, 0x6F, 0x2C, 0x59, 0x30, 0x7D, 0x60, 0x44, 0x7A, 0x5C, 
  0x33, 0x42, 0x40, 0x59, 0x1E, 0x33, 0x4B, 0x51, 0x5B, 0x49, 
  0x6D, 0x62, 0x33, 0x2A, 0x5E, 0x24, 0x2B, 0x7B, 0x5F, 0x4F, 
  0x65, 0x6A, 0x5F, 0x3B, 0x30, 0x28, 0x69, 0x7B, 0x57, 0x24, 
  0x60, 0x2F, 0x3F, 0x64, 0x35, 0x30, 0x47, 0x49, 0x41, 0x2C, 
  0x6E, 0x5C, 0x7D, 0x22, 0x32, 0x4F, 0x49, 0x58, 0x7C, 0x1E, 
  0x28, 0x57, 0x3A, 0x61, 0x2A, 0x3F, 0x68, 0x3A, 0x55, 0x53, 
  0x78, 0x66, 0x5F, 0x30, 0x3F, 0x60, 0x50, 0x72, 0x22, 0x34, 
  0x6D, 0x42, 0x4D, 0x5C, 0x79, 0x38, 0x39, 0x26, 0x3C, 0x26, 
  0x28, 0x7B, 0x1D, 0x53, 0x4A, 0x22, 0x4C, 0x1D, 0x67, 0x49, 
  0x64, 0x39, 0x25, 0x2F, 0x53, 0x61, 0x29, 0x53, 0x3D, 0x35, 
  0x40, 0x42, 0x4B, 0x33, 0x52, 0x67, 0x6F, 0x76, 0x42, 0x71, 
  0x7A, 0x58, 0x4D, 0x29, 0x50, 0x78, 0x5B, 0x5E, 0x40, 0x3A, 
  0x25, 0x6F, 0x45, 0x79, 0x4B, 0x2F, 0x25, 0x63, 0x57, 0x58, 
  0x6F, 0x6A, 0x60, 0x5C, 0x7E, 0x64, 0x74, 0x34, 0x70, 0x4B, 
  0x77, 0x53, 0x7C, 0x2B, 0x1E, 0x29, 0x6B, 0x36, 0x31, 0x39, 
  0x47, 0x36, 0x5E, 0x66, 0x6A, 0x3B, 0x4E, 0x51, 0x6C, 0x38, 
  0x5C, 0x29, 0x2E, 0x1F, 0x28, 0x6D, 0x1F, 0x76, 0x46, 0x43, 
  0x27, 0x4F, 0x38, 0x7E, 0x22, 0x67, 0x57, 0x34, 0x1C, 0x22, 
  0x7E, 0x62, 0x40, 0x77, 0x43, 0x4A, 0x7E, 0x5D, 0x54, 0x1C, 
  0x46, 0x47, 0x31, 0x43, 0x50, 0x50, 0x24, 0x60, 0x32, 0x6C, 
  0x22, 0x4C, 0x6B, 0x53, 0x75, 0x78, 0x72, 0x4A, 0x28, 0x66, 
  0x37, 0x72, 0x32, 0x63, 0x6A, 0x3B, 0x2D, 0x36, 0x2F, 0x37, 
  0x25, 0x40, 0x56, 0x30, 0x2D, 0x61, 0x1F, 0x6A, 0x7B, 0x1E, 
  0x3A, 0x48, 0x62, 0x6C, 0x21, 0x29, 0x2D, 0x70, 0x20, 0x3A, 
  0x4D, 0x77, 0x6A, 0x32, 0x4A, 0x24, 0x42, 0x4A, 0x76, 0x46, 
  0x51, 0x60, 0x4A, 0x45, 0x7A, 0x59, 0x49, 0x3B, 0x70, 0x40, 
  0x2D, 0x59, 0x70, 0x72, 0x37, 0x5B, 0x20, 0x68, 0x4E, 0x4A, 
  0x35, 0x39, 0x5C, 0x20, 0x61, 0x5C, 0x66, 0x56, 0x6B, 0x45, 
  0x4F, 0x34, 0x2F, 0x47, 0x25, 0x77, 0x2C, 0x62, 0x7A, 0x4F, 
  0x29, 0x68, 0x28, 0x33, 0x52, 0x34, 0x5C, 0x35, 0x24, 0x1C, 
  0x39, 0x5A, 0x2A, 0x4C, 0x4B, 0x44, 0x2C, 0x5E, 0x4A, 0x1E, 
  0x5F, 0x2F, 0x75, 0x7D, 0x3B, 0x1F, 0x43, 0x5F, 0x75, 0x4E, 
  0x55, 0x57, 0x21, 0x52, 0x32, 0x5F, 0x20, 0x2E, 0x64, 0x79, 
  0x6D, 0x3F, 0x7B, 0x46, 0x41, 0x75, 0x72, 0x37, 0x3C, 0x6E, 
  0x20, 0x2C, 0x61, 0x6E, 0x7B, 0x78, 0x21, 0x1F, 0x69, 0x4A, 
  0x6B, 0x21, 0x32, 0x27, 0x37, 0x32, 0x72, 0x63, 0x7E, 0x29, 
  0x4D, 0x7D, 0x77, 0x41, 0x75, 0x5B, 0x58, 0x55, 0x67, 0x79, 
  0x3F, 0x5D, 0x72, 0x6B, 0x4E, 0x3E, 0x58, 0x41, 0x54, 0x7A, 
  0x5B, 0x21, 0x50, 0x3F, 0x6D, 0x4E, 0x43, 0x3C, 0x4A, 0x29, 
  0x22, 0x7D, 0x69, 0x5C, 0x42, 0x55, 0x50, 0x21, 0x4D, 0x50, 
  0x1F, 0x60, 0x43, 0x5F, 0x3F, 0x60, 0x66, 0x69, 0x66, 0x57, 
  0x1E, 0x3B, 0x42, 0x32, 0x68, 0x4A, 0x35, 0x75, 0x28, 0x43, 
  0x47, 0x62, 0x75, 0x67, 0x4E, 0x33, 0x3F, 0x4D, 0x34, 0x48, 
  0x61, 0x6B, 0x58, 0x6B, 0x58, 0x46, 0x75, 0x5B, 0x26, 0x2D, 
  0x38, 0x71, 0x53, 0x5F, 0x45, 0x6A, 0x25, 0x45, 0x47, 0x39, 
  0x27, 0x7B, 0x2D, 0x32, 0x2D, 0x4F, 0x56, 0x1D, 0x7E, 0x5E, 
  0x49, 0x57, 0x71, 0x46, 0x41, 0x52, 0x2C, 0x47, 0x78, 0x45, 
  0x30, 0x52, 0x29, 0x4A, 0x3D, 0x7D, 0x2B, 0x4C, 0x33, 0x32, 
  0x38, 0x7B, 0x4E, 0x52, 0x25, 0x49, 0x50, 0x36, 0x77, 0x36, 
  0x49, 0x5A, 0x54, 0x39, 0x5C, 0x46, 0x36, 0x30, 0x2F, 0x33, 
  0x6E, 0x6C, 0x63, 0x78, 0x2E, 0x60, 0x4F, 0x4B, 0x1C, 0x28, 
  0x6E, 0x77, 0x60, 0x2F, 0x4B, 0x60, 0x56, 0x2F, 0x59, 0x20, 
  0x45, 0x37, 0x74, 0x75, 0x7E, 0x3B, 0x61, 0x6F, 0x2C, 0x23, 
  0x72, 0x3F, 0x1E, 0x57, 0x3A, 0x3F, 0x3F, 0x77, 0x35, 0x7C, 
  0x3F, 0x4B, 0x51, 0x53, 0x53, 0x36, 0x2B, 0x76, 0x23, 0x32, 
  0x26, 0x72, 0x7E, 0x3C, 0x4A, 0x1D, 0x29, 0x47, 0x64, 0x61, 
  0x7E, 0x46, 0x3E, 0x3C, 0x75, 0x53, 0x58, 0x71, 0x53, 0x27, 
  0x61, 0x56, 0x5A, 0x3B, 0x1C, 0x2A, 0x6C, 0x4A, 0x62, 0x67, 
  0x7A, 0x3B, 0x5C, 0x6B, 0x51, 0x61, 0x3D, 0x4E, 0x43, 0x48, 
  0x3C, 0x1F, 0x5B, 0x52, 0x69, 0x5F, 0x73, 0x4A, 0x3A, 0x4A, 
  0x5F, 0x69, 0x1E, 0x6F, 0x32, 0x47, 0x74, 0x63, 0x3E, 0x23, 
  0x3A, 0x67, 0x5A, 0x35, 0x75, 0x70, 0x7B, 0x5E, 0x5C, 0x76, 
  0x2E, 0x29, 0x2C, 0x71, 0x1F, 0x62, 0x3B, 0x7A, 0x40, 0x28, 
  0x1F, 0x2C, 0x5A, 0x3E, 0x40, 0x37, 0x53, 0x59, 0x71, 0x3C, 
  0x22, 0x40, 0x25, 0x47, 0x4F, 0x6D, 0x4F, 0x21, 0x2E, 0x4F, 
  0x54, 0x66, 0x75, 0x35, 0x76, 0x33, 0x21, 0x30, 0x29, 0x5E, 
  0x67, 0x39, 0x49, 0x29, 0x3E, 0x74, 0x74, 0x44, 0x1E, 0x5B, 
  0x53, 0x7C, 0x72, 0x5A, 0x31, 0x3D, 0x1E, 0x6A, 0x2C, 0x48, 
  0x26, 0x50, 0x34, 0x53, 0x7B, 0x58, 0x32, 0x2D, 0x5A, 0x3A, 
  0x40, 0x40, 0x4A, 0x68, 0x32, 0x35, 0x61, 0x63, 0x67, 0x68, 
  0x1F, 0x37, 0x5B, 0x62, 0x60, 0x29, 0x70, 0x7B, 0x51, 0x7A, 
  0x4B, 0x21, 0x59, 0x7E, 0x6E, 0x71, 0x68, 0x7C, 0x66, 0x62, 
  0x5D, 0x39, 0x2E, 0x54, 0x75, 0x3C, 0x1C, 0x57, 0x58, 0x29, 
  0x27, 0x75, 0x68, 0x3B, 0x68, 0x53, 0x44, 0x2D, 0x29, 0x72, 
  0x4C, 0x25, 0x29, 0x75, 0x5B, 0x2D, 0x4D, 0x30, 0x65, 0x29, 
  0x2B, 0x73, 0x20, 0x48, 0x64, 0x6D, 0x4A, 0x65, 0x47, 0x31, 
  0x7C, 0x44, 0x28, 0x3D, 0x3A, 0x51, 0x58, 0x53, 0x79, 0x1E, 
  0x33, 0x56, 0x36, 0x7D, 0x68, 0x1F, 0x24, 0x40, 0x43, 0x27, 
  0x35, 0x72, 0x24, 0x62, 0x61, 0x22, 0x2D, 0x5B, 0x54, 0x6B, 
  0x30, 0x27, 0x62, 0x6E, 0x79, 0x57, 0x42, 0x64, 0x6A, 0x7E, 
  0x2C, 0x7C, 0x3B, 0x5B, 0x38, 0x44, 0x22, 0x4B, 0x6F, 0x70, 
  0x5E, 0x27, 0x65, 0x7A, 0x2F, 0x33, 0x4F, 0x44, 0x5E, 0x53, 
  0x58, 0x38, 0x78, 0x3E, 0x63, 0x60, 0x63, 0x32, 0x5A, 0x5D, 
  0x1C, 0x26, 0x22, 0x39, 0x4F, 0x53, 0x7A, 0x2B, 0x5C, 0x35, 
  0x6E, 0x75, 0x4D, 0x65, 0x57, 0x2D, 0x2B, 0x4B, 0x46, 0x68, 
  0x40, 0x26, 0x7E, 0x7D, 0x39, 0x79, 0x76, 0x35, 0x59, 0x64, 
  0x48, 0x27, 0x72, 0x64, 0x4A, 0x36, 0x1C, 0x74, 0x5D, 0x7E, 
  0x30, 0x44, 0x7A, 0x6B, 0x1D, 0x50, 0x32, 0x3B, 0x58, 0x4B, 
  0x3B, 0x45, 0x46, 0x6E, 0x29, 0x5D, 0x7A, 0x76, 0x2E, 0x6C, 
  0x6B, 0x5E, 0x34, 0x73, 0x23, 0x59, 0x3B, 0x2D, 0xA6, 0x29, 
  0x6E, 0x62, 0x40, 0x7B, 0x26, 0x6E, 0x42, 0x7E, 0x20, 0x2B, 
  0x32, 0x36, 0x25, 0x5E, 0x1D, 0x34, 0x47, 0x26, 0x52, 0x3A, 
  0x49, 0x5B, 0x44, 0x53, 0x47, 0x65, 0x35, 0x6C, 0x4E, 0x3A, 
  0x48, 0x70, 0x72, 0x24, 0x6C, 0x68, 0x31, 0x37, 0x67, 0x60, 
  0x49, 0x4B, 0x5B, 0x72, 0x5E, 0x67, 0x36, 0x74, 0x3A, 0x26, 
  0x65, 0x2B, 0x59, 0x1E, 0x57, 0x79, 0x45, 0x4A, 0x24, 0x3D, 
  0x79, 0x78, 0x63, 0x53, 0x2D, 0x75, 0x2D, 0x45, 0xA4, 0x45, 
  0x3B, 0x29, 0x71, 0x21, 0x50, 0x3C, 0x7A, 0x7E, 0x3E, 0x38, 
  0x2A, 0x47, 0x2F, 0x4C, 0x56, 0x34, 0x51, 0x3D, 0x56, 0x6F, 
  0x30, 0x32, 0x51, 0x3E, 0x75, 0x69, 0x2B, 0x75, 0x28, 0x40, 
  0x73, 0x51, 0x2E, 0x71, 0x5E, 0x72, 0x52, 0x5D, 0x6F, 0x5C, 
  0x45, 0x7D, 0x40, 0x72, 0x53, 0x3C, 0x37, 0x55, 0x41, 0x37, 
  0x41, 0x5D, 0x36, 0x4F, 0x30, 0x6C, 0x2A, 0x23, 0x31, 0x7C, 
  0x3B, 0x70, 0x36, 0x76, 0x50, 0x43, 0x37, 0x28, 0x3D, 0x76, 
  0x34, 0x1C, 0x5A, 0x4D, 0x40, 0x31, 0x4C, 0x62, 0x55, 0x3B, 
  0x37, 0x39, 0x2D, 0x5F, 0x79, 0x32, 0x6E, 0x5A, 0x59, 0x79, 
  0x67, 0x6B, 0x44, 0x75, 0x31, 0x6D, 0x4F, 0x38, 0x27, 0x2D, 
  0x53, 0x25, 0x23, 0x3E, 0x29, 0x65, 0x54, 0x32, 0x5C, 0x5E, 
  0x43, 0x63, 0x42, 0x78, 0x42, 0x61, 0x74, 0x43, 0x3D, 0x22, 
  0x49, 0x79, 0x31, 0x2F, 0x20, 0x50, 0x5B, 0x53, 0x39, 0x20, 
  0x53, 0x58, 0x73, 0x36, 0x32, 0x7A, 0x26, 0x27, 0x40, 0x60, 
  0x5F, 0x33, 0x5D, 0x25, 0x72, 0x61, 0x46, 0x4D, 0x66, 0x22, 
  0x59, 0x44, 0x6E, 0x55, 0x7A, 0x78, 0x74, 0x6A, 0x48, 0x42, 
  0x1D, 0x31, 0x20, 0x31, 0x7A, 0x46, 0x59, 0x26, 0x5F, 0x38, 
  0x2C, 0x43, 0x35, 0x47, 0x34, 0x62, 0x65, 0x2B, 0x61, 0x70, 
  0x2E, 0x34, 0x56, 0x79, 0x75, 0x42, 0x44, 0x6B, 0x58, 0x61, 
  0x52, 0x57, 0x6F, 0x3C, 0x7A, 0x67, 0x45, 0x5A, 0x2A, 0x24, 
  0x1E, 0x43, 0x41, 0x27, 0x1E, 0x3B, 0x24, 0x6F, 0x53, 0x6B, 
  0x58, 0x52, 0x70, 0x7C, 0x2B, 0x79, 0x6D, 0x79, 0x7D, 0x54, 
  0x6F, 0x39, 0x6F, 0x4B, 0x78, 0x75, 0x62, 0x20, 0x7A, 0x75, 
  0x64, 0x2C, 0x39, 0x7D, 0x43, 0x5B, 0x5C, 0x74, 0x22, 0x6A, 
  0x24, 0x2E, 0x53, 0x3F, 0x45, 0x39, 0x32, 0x60, 0x7E, 0x63, 
  0x22, 0x20, 0x36, 0x58, 0x33, 0x3A, 0x46, 0x4B, 0x62, 0x6F, 
  0x30, 0x37, 0x35, 0x5C, 0x5C, 0x56, 0x5C, 0x65, 0x68, 0x2F, 
  0x25, 0x6C, 0x58, 0x6F, 0x7A, 0x23, 0x4F, 0x32, 0x61, 0x4A, 
  0x6C, 0x37, 0x24, 0x7D, 0x4E, 0x5E, 0x5B, 0x3E, 0x4E, 0x56, 
  0x3F, 0x77, 0x6D, 0x68, 0x5C, 0x6B, 0x33, 0x63, 0x50, 0x31, 
  0x22, 0x36, 0x25, 0x30, 0x37, 0x39, 0x31, 0x4B, 0x6D, 0x6B, 
  0x4B, 0x53, 0x2F, 0x29, 0x46, 0x2D, 0x34, 0x4D, 0x7A, 0x75, 
  0x3A, 0x65, 0x23, 0x24, 0x4B, 0x47, 0x6B, 0x75, 0x31, 0x78, 
  0x48, 0x6D, 0x2C, 0x28, 0x7B, 0x34, 0x35, 0x23, 0x64, 0x3D, 
  0x7E, 0x21, 0x4C, 0x33, 0x21, 0x6E, 0x4E, 0x43, 0x29, 0x2A, 
  0x25, 0x34, 0x1C, 0x51, 0x34, 0x25, 0x6C, 0x39, 0x5B, 0x33, 
  0x65, 0x66, 0x6B, 0x3F, 0x66, 0x6D, 0x57, 0x31, 0x60, 0x63, 
  0x76, 0x48, 0x5E, 0x1E, 0x59, 0x6A, 0x51, 0x74, 0x65, 0x47, 
  0x6E, 0x5B, 0x7B, 0x5D, 0x64, 0x47, 0x39, 0x65, 0x4D, 0x40, 
  0x20, 0x24, 0x7C, 0x61, 0x1C, 0x64, 0x49, 0x40, 0x76, 0x42, 
  0x66, 0x66, 0x2D, 0x55, 0x4F, 0x63, 0x69, 0x4E, 0x6C, 0x71, 
  0x4F, 0x23, 0x7C, 0x1C, 0x49, 0x46, 0x5D, 0x7D, 0x59, 0x6C, 
  0x2D, 0x61, 0x78, 0x64, 0x23, 0x3B, 0x49, 0x3D, 0x7B, 0x6B, 
  0x6D, 0x22, 0x56, 0x62, 0x77, 0x50, 0x2E, 0x2F, 0x73, 0x5D, 
  0x1E, 0x33, 0x35, 0x25, 0x33, 0x36, 0x4D, 0x6D, 0x79, 0x64, 
  0x5A, 0x23, 0x4E, 0x3C, 0x31, 0x48, 0x2E, 0x28, 0x55, 0x3C, 
  0x75, 0x2A, 0x31, 0x4D, 0x3F, 0x28, 0x52, 0x21, 0x3E, 0x4A, 
  0x67, 0x4F, 0x3C, 0x58, 0x3F, 0x36, 0x37, 0x49, 0x7D, 0x29, 
  0x64, 0x2F, 0x64, 0x3B, 0x2B, 0x35, 0x6B, 0x50, 0x4A, 0x5D, 
  0x67, 0x41, 0x79, 0x48, 0x1D, 0x1C, 0x31, 0x4F, 0x4A, 0x7B, 
  0x5B, 0x55, 0x4F, 0x42, 0x73, 0x49, 0x32, 0x42, 0x65, 0x5A, 
  0x6C, 0x5B, 0x2F, 0x75, 0x3C, 0x3C, 0x67, 0x52, 0x55, 0x35, 
  0x25, 0x49, 0x45, 0x35, 0x64, 0x65, 0x27, 0x6E, 0x3B, 0x46, 
  0x24, 0x1D, 0x64, 0x52, 0x71, 0x51, 0x70, 0x3D, 0x37, 0x32, 
  0x38, 0x6A, 0x76, 0x59, 0x4A, 0x44, 0x22, 0x65, 0x7E, 0x31, 
  0x4B, 0x75, 0x2F, 0x20, 0x7B, 0x66, 0x7A, 0x1F, 0x46, 0x37, 
  0x6C, 0x42, 0x6C, 0x1C, 0x37, 0x45, 0x69, 0x34, 0x42, 0x68, 
  0x75, 0x54, 0x55, 0x7D, 0x2C, 0x3F, 0x64, 0x31, 0x5A, 0x65, 
  0x4E, 0x38, 0x42, 0x65, 0x79, 0x7A, 0x69, 0x5B, 0x33, 0x41, 
  0x71, 0x5A, 0x72, 0x78, 0x21, 0x61, 0x77, 0x31, 0x2B, 0x6B, 
  0x5B, 0x38, 0x4F, 0x2F, 0x36, 0x32, 0x4D, 0x29, 0x28, 0x72, 
  0x2A, 0x63, 0x7B, 0x6C, 0x31, 0x23, 0x4C, 0x63, 0x39, 0x61, 
  0x33, 0x6A, 0x3A, 0x2B, 0x73, 0x56, 0x30, 0x74, 0x3D, 0x7B, 
  0x76, 0x4B, 0x67, 0x46, 0x50, 0x73, 0x1C, 0x54, 0x6B, 0x32, 
  0x6C, 0x75, 0x6A, 0x55, 0x1C, 0x6B, 0x72, 0x2C, 0x7E, 0x71, 
  0x75, 0x63, 0x5A, 0x3B, 0x60, 0x29, 0x37, 0x73, 0x60, 0x40, 
  0x2C, 0x62, 0x7A, 0x53, 0x78, 0x62, 0x3E, 0x46, 0x48, 0x1F, 
  0x7D, 0x77, 0x79, 0x6F, 0x7B, 0x26, 0x39, 0x3A, 0x36, 0x3A, 
  0x57, 0x77, 0x1E, 0x4B, 0x20, 0x7D, 0x76, 0x71, 0x79, 0x3E, 
  0x75, 0x75, 0x23, 0x4B, 0x2E, 0x3C, 0x37, 0x5F, 0x40, 0x56, 
  0x35, 0x5C, 0x7E, 0x4D, 0x5F, 0x31, 0x22, 0x24, 0x4C, 0x3D, 
  0x3A, 0x68, 0x4C, 0x46, 0x21, 0x66, 0x2C, 0x6C, 0x72, 0x58, 
  0x6A, 0x4F, 0x35, 0x36, 0x63, 0x38, 0x4D, 0x22, 0x7D, 0x71, 
  0x1C, 0x2C, 0x25, 0x49, 0x5B, 0x33, 0x2D, 0x53, 0x4E, 0x39, 
  0x34, 0x79, 0x73, 0x70, 0x6A, 0x76, 0x43, 0x3C, 0x5A, 0x6F, 
  0x4C, 0x5E, 0x7D, 0x77, 0x2A, 0x35, 0x66, 0x2E, 0x6D, 0x20, 
  0x2D, 0x69, 0x5C, 0x78, 0x58, 0x4B, 0x76, 0x46, 0x56, 0x44, 
  0x61, 0x4E, 0x31, 0x2A, 0x77, 0x6C, 0x5E, 0x76, 0x49, 0x7D, 
  0x26, 0x26, 0x61, 0x3A, 0x5D, 0x25, 0x7D, 0x5C, 0x6E, 0x30, 
  0x20, 0x53, 0x20, 0x7D, 0x64, 0x5E, 0x49, 0x65, 0x60, 0x3D, 
  0x23, 0x39, 0x20, 0x4F, 0x22, 0x7D, 0x3B, 0x7A, 0x39, 0x79, 
  0x5C, 0x4D, 0x33, 0x5A, 0x37, 0x6C, 0x7E, 0x54, 0x2E, 0x32, 
  0x58, 0x3F, 0x24, 0x74, 0x62, 0x7D, 0x5C, 0x2C, 0x39, 0x38, 
  0x74, 0x35, 0x6A, 0x65, 0x79, 0x26, 0x47, 0x4B, 0x7C, 0x51, 
  0x6C, 0x52, 0x42, 0x5D, 0x60, 0x48, 0x37, 0x4A, 0x28, 0x71, 
  0x2A, 0x67, 0x65, 0x61, 0x6F, 0x3B, 0x3F, 0x3C, 0x6A, 0x2F, 
  0x69, 0x29, 0x44, 0x6E, 0x74, 0x37, 0x6C, 0x20, 0x7E, 0x5D, 
  0x6C, 0x71, 0x41, 0x35, 0x21, 0x34, 0x28, 0x57, 0x51, 0x52, 
  0x32, 0x50, 0x36, 0x20, 0x74, 0x34, 0x32, 0x26, 0x28, 0x51, 
  0x56, 0x51, 0x53, 0x3D, 0x2B, 0x33, 0x50, 0x47, 0x21, 0x28, 
  0x43, 0x54, 0x63, 0x30, 0x2A, 0x57, 0x23, 0x1F, 0x2E, 0x26, 
  0x7D, 0x3D, 0x48, 0x24, 0x7C, 0x71, 0x62, 0x1E, 0x2A, 0x53, 
  0x2E, 0x2A, 0x47, 0x7C, 0x3A, 0x75, 0x1F, 0x70, 0x72, 0x67, 
  0x23, 0x27, 0x39, 0x33, 0x59, 0x6F, 0x37, 0x27, 0x70, 0x6D, 
  0x50, 0x7E, 0x4F, 0x28, 0x64, 0x21, 0x5C, 0x7C, 0x71, 0x24, 
  0x4D, 0x79, 0x5F, 0x60, 0x65, 0x39, 0x5E, 0x72, 0x79, 0x5A, 
  0x22, 0x69, 0x36, 0x6B, 0x3F, 0x60, 0x44, 0x21, 0x77, 0x3B, 
  0x69, 0x40, 0x6D, 0x39, 0x20, 0x2D, 0x72, 0x7E, 0x63, 0x2E, 
  0x7E, 0x47, 0x2F, 0x52, 0x68, 0x60, 0x76, 0x36, 0x3A, 0x37, 
  0x6C, 0x6B, 0x36, 0x1D, 0x22, 0x7C, 0x32, 0x7A, 0x7D, 0x27, 
  0x34, 0x66, 0x38, 0x4A, 0x62, 0x22, 0x4A, 0x69, 0x42, 0x44, 
  0x56, 0x36, 0x67, 0x28, 0x2A, 0x5D, 0x58, 0x5F, 0x3E, 0x60, 
  0x71, 0x2B, 0x50, 0x5E, 0x5A, 0x7D, 0x7E, 0x44, 0x53, 0x23, 
  0x37, 0x3C, 0x43, 0x79, 0x67, 0x75, 0x70, 0x3A, 0x61, 0x33, 
  0x5C, 0x6F, 0x5C, 0x7E, 0x6D, 0x2E, 0x34, 0x51, 0x40, 0x30, 
  0x49, 0x3C, 0x1D, 0x4F, 0x7E, 0x4E, 0x3C, 0x35, 0x1F, 0x72, 
  0x1D, 0x23, 0x2D, 0x7B, 0x51, 0x45, 0x58, 0x48, 0x76, 0x21, 
  0x5B, 0x6A, 0x6B, 0x6D, 0x3B, 0x2B, 0x6E, 0x5A, 0x45, 0x4C, 
  0x2E, 0x69, 0x5C, 0x7C, 0x43, 0x45, 0x29, 0x58, 0x4C, 0x3D, 
  0x1F, 0x2D, 0x34, 0x7D, 0x56, 0x39, 0x6D, 0x63, 0x35, 0x73, 
  0x51, 0x3F, 0x30, 0x66, 0x1E, 0x73, 0x7E, 0x50, 0x49, 0x74, 
  0x52, 0x69, 0x31, 0x79, 0x3D, 0x43, 0x5F, 0x72, 0x6F, 0x34, 
  0x39, 0x67, 0x34, 0x23, 0x77, 0x6F, 0x45, 0x58, 0x43, 0x41, 
  0x24, 0x7E, 0x43, 0x32, 0x38, 0x42, 0x49, 0x52, 0x25, 0x75, 
  0x3E, 0x6F, 0x53, 0x61, 0x5A, 0x32, 0x76, 0x42, 0x4F, 0x77, 
  0x1E, 0x62, 0x74, 0x22, 0x24, 0x40, 0x5F, 0x5D, 0x55, 0x2F, 
  0x47, 0x77, 0x4E, 0x53, 0x28, 0x62, 0x6A, 0x7E, 0x35, 0x40, 
  0x1D, 0x21, 0x2B, 0x5E, 0x3F, 0x4F, 0x55, 0x2B, 0x6A, 0x64, 
  0x53, 0x57, 0x56, 0x36, 0x47, 0x68, 0x79, 0x6D, 0x2E, 0x4D, 
  0x7D, 0x3C, 0x24, 0x68, 0x79, 0x3F, 0x43, 0x6E, 0x5B, 0x6E, 
  0x55, 0x70, 0x2C, 0x67, 0x50, 0x1D, 0x6E, 0x4F, 0x31, 0x36, 
  0x42, 0x2F, 0x4B, 0x77, 0x48, 0x30, 0x24, 0x45, 0x33, 0x32, 
  0x27, 0x40, 0x4F, 0x37, 0x4D, 0x69, 0x6A, 0x2F, 0x71, 0x59, 
  0x64, 0x2F, 0x56, 0x51, 0x7B, 0x6B, 0x2A, 0x76, 0x75, 0x7E, 
  0x61, 0x25, 0x24, 0x55, 0x75, 0x78, 0x4D, 0x6C, 0x7E, 0x51, 
  0x41, 0x3F, 0x25, 0x39, 0x26, 0x3E, 0x6F, 0x2B, 0x48, 0x6D, 
  0x2D, 0x26, 0x7C, 0x3F, 0x46, 0x7B, 0x6A, 0x7C, 0x5C, 0x43, 
  0x4B, 0x32, 0x2E, 0x2C, 0x3A, 0x5B, 0x4F, 0x5C, 0x72, 0x40, 
  0x3B, 0x5C, 0x67, 0x7E, 0x6A, 0x3D, 0x5C, 0x6A, 0x36, 0x52, 
  0x3C, 0x1E, 0x1C, 0x3C, 0x36, 0x58, 0x37, 0x5D, 0x23, 0x1F, 
  0x61, 0x4C, 0x49, 0x4B, 0x6E, 0x1C, 0x48, 0x2E, 0x7B, 0x28, 
  0x6C, 0x29, 0x30, 0x3A, 0x6A, 0x78, 0x70, 0x4D, 0x20, 0x77, 
  0x77, 0x4B, 0x6F, 0x56, 0x7D, 0x3A, 0x50, 0x32, 0x36, 0x2A, 
  0x31, 0x6A, 0x7A, 0x33, 0x67, 0x20, 0x6A, 0x2B, 0x78, 0x7C, 
  0x74, 0x41, 0x74, 0x45, 0x6E, 0x1D, 0x73, 0x79, 0x7A, 0x6D, 
  0x30, 0x1C, 0x7C, 0x4B, 0x42, 0x3A, 0x69, 0x24, 0x5C, 0x4D, 
  0x53, 0x7C, 0x58, 0x1C, 0x22, 0x65, 0x36, 0x30, 0x32, 0x29, 
  0x2A, 0x6B, 0x7C, 0x47, 0x69, 0x4C, 0x3E, 0x3C, 0x48, 0x6C, 
  0x65, 0x3D, 0x20, 0x3A, 0x54, 0x24, 0x41, 0x79, 0x22, 0x60, 
  0x51, 0x60, 0x3B, 0x5C, 0x5F, 0x49, 0x5F, 0x69, 0x75, 0x33, 
  0x37, 0x4C, 0x4E, 0x48, 0x71, 0x3E, 0x44, 0x5A, 0x74, 0x67, 
  0x72, 0x3A, 0x71, 0x24, 0x49, 0x29, 0x72, 0x6D, 0x31, 0x38, 
  0x4A, 0x2B, 0x28, 0x25, 0x61, 0x63, 0x6D, 0x7A, 0x4A, 0x5B, 
  0x55, 0x46, 0x28, 0x66, 0x45, 0x60, 0x30, 0x27, 0x5E, 0x28, 
  0x5B, 0x6F, 0x55, 0x32, 0x7D, 0x24, 0x40, 0x67, 0x20, 0x31, 
  0x3A, 0x27, 0x65, 0x4D, 0x38, 0x7E, 0x71, 0x63, 0x48, 0x34, 
  0x25, 0x37, 0x2E, 0x21, 0x75, 0x46, 0x38, 0x3A, 0x5E, 0x6A, 
  0x49, 0x34, 0x65, 0x29, 0x7C, 0x3E, 0x67, 0x40, 0x5C, 0x49, 
  0x32, 0x6D, 0x21, 0x31, 0x39, 0x67, 0x78, 0x5D, 0x79, 0x2C, 
  0x7B, 0x28, 0x2F, 0x63, 0x5A, 0x43, 0x69, 0x23, 0x4F, 0x24, 
  0x75, 0x44, 0x61, 0x37, 0x3F, 0x29, 0x49, 0x47, 0x70, 0x7B, 
  0x33, 0x4F, 0x55, 0x2A, 0x72, 0x40, 0x20, 0x7D, 0x7E, 0x42, 
  0x28, 0x58, 0x67, 0x41, 0x47, 0x7E, 0x6E, 0x65, 0x75, 0x31, 
  0x50, 0x6B, 0x53, 0x7D, 0x39, 0x4E, 0x5A, 0x42, 0x47, 0x39, 
  0x7E, 0x76, 0x1F, 0x31, 0x36, 0x64, 0x2C, 0x3E, 0x50, 0x2D, 
  0x3E, 0x48, 0x51, 0x53, 0x36, 0x69, 0x4B, 0x28, 0x60, 0x3F, 
  0x47, 0x41, 0x62, 0x34, 0x39, 0x53, 0x2A, 0x31, 0x64, 0x46, 
  0x3B, 0x60, 0x56, 0x34, 0x78, 0x6E, 0x48, 0x26, 0x3D, 0x79, 
  0x47, 0x42, 0x77, 0x27, 0x3F, 0x53, 0x73, 0x28, 0x7B, 0x2B, 
  0x27, 0x52, 0x51, 0x26, 0x4A, 0x2E, 0x69, 0x2C, 0x2C, 0x5F, 
  0x6C, 0x68, 0x4E, 0x45, 0x52, 0x7E, 0x70, 0x5D, 0x36, 0x6C, 
  0x6A, 0x78, 0x45, 0x5C, 0x58, 0x60, 0x65, 0x29, 0x1C, 0x2D, 
  0x53, 0x27, 0x1C, 0x55, 0x40, 0x76, 0x31, 0x45, 0x5D, 0x76, 
  0x34, 0x2E, 0x1F, 0x7B, 0x44, 0x34, 0x48, 0x2D, 0x60, 0x7B, 
  0x73, 0x3F, 0x78, 0x25, 0x27, 0x7D, 0x3B, 0x47, 0x6D, 0x6E, 
  0x1F, 0x63, 0x76, 0x1F, 0x36, 0x64, 0x22, 0x3D, 0x40, 0x62, 
  0x57, 0x56, 0x3A, 0x19, 0x50, 0x51, 0x47, 0x7B, 0x78, 0x6E, 
  0x3F, 0x1F, 0x48, 0x39, 0x2D, 0x31, 0x2F, 0x45, 0x7B, 0x5C, 
  0x6A, 0x2C, 0x44, 0x52, 0x60, 0x79, 0x6C, 0x38, 0x6B, 0x76, 
  0x3A, 0x70, 0x34, 0x4A, 0x35, 0x46, 0x4C, 0x1D, 0x7E, 0x3D, 
  0x5E, 0x7E, 0x67, 0x2B, 0x29, 0x2A, 0x78, 0x23, 0x3B, 0x7E, 
  0x47, 0x58, 0x68, 0x5E, 0x4D, 0x46, 0x52, 0x72, 0x52, 0x50, 
  0x65, 0x2C, 0x49, 0x59, 0x34, 0x4D, 0x7E, 0x64, 0x20, 0x78, 
  0x4B, 0x2C, 0x3A, 0x61, 0x6B, 0x56, 0x24, 0x47, 0x56, 0x48, 
  0x28, 0x65, 0x5D, 0x55, 0x79, 0x72, 0x64, 0x2B, 0x29, 0x70, 
  0x41, 0x65, 0x7E, 0x5B, 0x32, 0x6A, 0x37, 0x62, 0x45, 0x2F, 
  0x40, 0x6D, 0x3A, 0x32, 0x4E, 0x7B, 0x42, 0x5C, 0x49, 0x62, 
  0x53, 0x28, 0x38, 0x5F, 0x50, 0x71, 0x48, 0x3C, 0x4E, 0x4C, 
  0x27, 0x76, 0x30, 0x30, 0x67, 0x70, 0x1D, 0x2C, 0x7D, 0x2A, 
  0x49, 0x27, 0x57, 0x30, 0x73, 0x39, 0x77, 0x6E, 0x47, 0x56, 
  0x45, 0x4D, 0x36, 0x73, 0x49, 0x71, 0x79, 0x64, 0x48, 0x51, 
  0x32, 0x72, 0x29, 0x25, 0x79, 0x30, 0x2F, 0x3D, 0x32, 0x4E, 
  0x1F, 0x6E, 0x7E, 0x66, 0x75, 0x5A, 0x57, 0x2B, 0x31, 0x3C, 
  0x6E, 0x61, 0x26, 0x3B, 0x25, 0x4D, 0x38, 0x39, 0x6E, 0x49, 
  0x26, 0x20, 0x3A, 0x2C, 0x71, 0x45, 0x4C, 0x1C, 0x47, 0x5A, 
  0x37, 0x57, 0x22, 0x69, 0x7A, 0x43, 0x47, 0x58, 0x74, 0x56, 
  0x1F, 0x4C, 0x4E, 0x36, 0x60, 0x62, 0x49, 0x67, 0x47, 0x1F, 
  0x24, 0x3D, 0x53, 0x42, 0x2A, 0x21, 0x79, 0x76, 0x66, 0x75, 
  0x5C, 0x36, 0x53, 0x32, 0x65, 0x21, 0x32, 0x3C, 0x3F, 0x60, 
  0x29, 0x42, 0x20, 0x3D, 0x3E, 0x54, 0x3C, 0x31, 0x67, 0x49, 
  0x53, 0x25, 0x58, 0x5C, 0x74, 0x24, 0x2B, 0x60, 0x1F, 0x59, 
  0x5C, 0x2D, 0x7E, 0x67, 0x4C, 0x2D, 0x63, 0x5D, 0x64, 0x6E, 
  0x6D, 0x43, 0x67, 0x3A, 0x74, 0x76, 0x36, 0x73, 0x2C, 0x3E, 
  0x44, 0x3E, 0x3B, 0x4E, 0x3B, 0x5E, 0x4F, 0x5F, 0x65, 0x70, 
  0x6B, 0x54, 0x22, 0x23, 0x58, 0x5D, 0x4A, 0x31, 0x5E, 0x5C, 
  0x40, 0x2E, 0x7C, 0x35, 0x2C, 0x2B, 0x33, 0x33, 0x2C, 0x4D, 
  0x40, 0x5B, 0x6D, 0x33, 0x3F, 0x3B, 0x26, 0x5F, 0x3D, 0x60, 
  0x3A, 0x3B, 0x74, 0x6A, 0x78, 0x7B, 0x5F, 0x4C, 0x75, 0x29, 
  0x32, 0x1F, 0x1F, 0x5E, 0x7E, 0x6C, 0x65, 0x61, 0x65, 0x3F, 
  0x7B, 0x5F, 0x24, 0x5B, 0x42, 0x73, 0x3E, 0x51, 0x69, 0x7B, 
  0x55, 0x5D, 0x36, 0x73, 0x7C, 0x3B, 0x29, 0x21, 0x3E, 0x69, 
  0x2F, 0x62, 0x21, 0x70, 0x5D, 0x54, 0x1D, 0x55, 0x76, 0x63, 
  0x20, 0x38, 0x53, 0x64, 0x4B, 0x71, 0x4F, 0x24, 0x78, 0x31, 
  0x54, 0x6A, 0x45, 0x27, 0x1C, 0x3A, 0x5F, 0x2C, 0x56, 0x5A, 
  0x67, 0x22, 0x68, 0x64, 0x6C, 0x29, 0x28, 0x2C, 0x2F, 0x26, 
  0x24, 0x1C, 0x6E, 0x23, 0x70, 0x76, 0x61, 0x6F, 0x5A, 0x59, 
  0x68, 0x40, 0x22, 0x4A, 0x1C, 0x56, 0x7A, 0x42, 0x60, 0x42, 
  0x30, 0x7E, 0x24, 0x72, 0x1D, 0x7C, 0x2B, 0x77, 0x3F, 0x65, 
  0x62, 0x75, 0x5D, 0x3C, 0x63, 0x64, 0x66, 0x4F, 0x76, 0x26, 
  0x27, 0x35, 0x63, 0x20, 0x35, 0x35, 0x4B, 0x58, 0x4D, 0x75, 
  0x5C, 0x1C, 0x72, 0x45, 0x4A, 0x65, 0x3E, 0x31, 0x64, 0x33, 
  0x35, 0x53, 0x61, 0x4F, 0x20, 0x4B, 0x44, 0x3A, 0x2D, 0x6E, 
  0x36, 0x30, 0x42, 0x6B, 0x70, 0x35, 0x23, 0x47, 0x1D, 0x62, 
  0x22, 0x5A, 0x31, 0x20, 0x4F, 0x2E, 0x23, 0x2F, 0x2C, 0x34, 
  0x30, 0x26, 0x63, 0x78, 0x3C, 0x4C, 0x5B, 0x32, 0x50, 0x6D, 
  0x1E, 0x28, 0x76, 0x5C, 0x70, 0x1D, 0x43, 0x20, 0x45, 0x3A, 
  0x68, 0x45, 0x20, 0x3F, 0x21, 0x51, 0x1F, 0x55, 0x22, 0x67, 
  0x72, 0x6E, 0x34, 0x54, 0x5D, 0x27, 0x65, 0x3C, 0x70, 0x40, 
  0x65, 0x3B, 0x2F, 0x60, 0x1E, 0x7C, 0x76, 0x5F, 0x65, 0x47, 
  0x2E, 0x29, 0x74, 0x37, 0x6F, 0x70, 0x6B, 0x50, 0x3D, 0x72, 
  0x55, 0x7D, 0x73, 0x69, 0x4B, 0x5C, 0x7D, 0x43, 0x26, 0x54, 
  0x25, 0x5E, 0x61, 0x6C, 0x57, 0x6A, 0x65, 0x63, 0x7C, 0x56, 
  0x6A, 0x4A, 0x39, 0x2F, 0x51, 0x6B, 0x74, 0x76, 0x29, 0x20, 
  0x3C, 0x3F, 0x6A, 0x42, 0x57, 0x70, 0x56, 0x42, 0x57, 0x22, 
  0x54, 0x67, 0x68, 0x77, 0x21, 0x3E, 0x2A, 0x63, 0x32, 0x44, 
  0x48, 0x4F, 0x7A, 0x2D, 0x5B, 0x6A, 0x71, 0x50, 0x53, 0x3A, 
  0x60, 0x26, 0x76, 0x3A, 0x6F, 0x4D, 0x47, 0x6D, 0x31, 0x6C, 
  0x44, 0x43, 0x39, 0x45, 0x39, 0x76, 0x4B, 0x79, 0x65, 0x67, 
  0x5B, 0x55, 0x65, 0x34, 0x7B, 0x73, 0x29, 0x2E, 0x1E, 0x7E, 
  0x37, 0x6E, 0x2A, 0x66, 0x7E, 0x1C, 0x74, 0x70, 0x6A, 0x4D, 
  0x1E, 0x7A, 0x3B, 0x5E, 0x47, 0x23, 0x22, 0x44, 0x59, 0x5B, 
  0x38, 0x2F, 0x29, 0x67, 0x35, 0x52, 0x4B, 0x62, 0x60, 0x5D, 
  0x2E, 0x63, 0x47, 0x34, 0x29, 0x1C, 0x4B, 0x65, 0x27, 0x7D, 
  0x22, 0x5B, 0x5D, 0x6F, 0x33, 0x2D, 0x2B, 0x36, 0x4B, 0x2F, 
  0x29, 0x4A, 0x60, 0x39, 0x71, 0x4B, 0x43, 0x32, 0x2B, 0x58, 
  0x30, 0x4E, 0x4D, 0x35, 0x4A, 0x3D, 0x3C, 0x76, 0x37, 0x69, 
  0x5B, 0x46, 0x5F, 0x1F, 0x6A, 0x4E, 0x23, 0x2E, 0x57, 0x4F, 
  0x7A, 0x21, 0x5F, 0x49, 0x71, 0x3E, 0x7C, 0x36, 0x54, 0x1F, 
  0x5C, 0x39, 0x22, 0x7E, 0x27, 0x27, 0x66, 0x76, 0x42, 0x4D, 
  0x3A, 0x45, 0x5B, 0x61, 0x1F, 0x49, 0x22, 0x7D, 0x64, 0x7D, 
  0x78, 0x40, 0x74, 0x68, 0x76, 0x5B, 0x62, 0x5B, 0x5C, 0x5D, 
  0x30, 0x69, 0x58, 0x6C, 0x65, 0x45, 0x2F, 0x6E, 0x61, 0x64, 
  0x7A, 0x69, 0x48, 0x77, 0x36, 0x3D, 0x50, 0x62, 0x2A, 0x39, 
  0x26, 0x70, 0x3A, 0x3D, 0x62, 0x28, 0x4B, 0x20, 0x29, 0x47, 
  0x1E, 0x2E, 0x5E, 0x32, 0x64, 0x2E, 0x54, 0x21, 0x75, 0x79, 
  0x63, 0x54, 0x60, 0x6C, 0x59, 0x56, 0x5F, 0x73, 0x54, 0x52, 
  0x60, 0x4C, 0x28, 0x22, 0x72, 0x7C, 0x6B, 0x74, 0x20, 0x62, 
  0x20, 0x20, 0x35, 0x41, 0x43, 0x2B, 0x59, 0x48, 0x7E, 0x2D, 
  0x41, 0x7E, 0x33, 0x30, 0x35, 0x59, 0x65, 0x60, 0x1F, 0x70, 
  0x54, 0x68, 0x3E, 0x55, 0x5E, 0x76, 0x6A, 0x6A, 0x54, 0x71, 
  0x37, 0x5D, 0x3D, 0x63, 0x4E, 0x67, 0x69, 0x3F, 0x7A, 0x5A, 
  0x75, 0x23, 0x69, 0x4A, 0x5A, 0x48, 0x3A, 0x31, 0x61, 0x4F, 
  0x4B, 0x6A, 0x79, 0x2A, 0x68, 0x58, 0x5E, 0x5F, 0x32, 0x3C, 
  0x47, 0x6C, 0x6B, 0x77, 0x78, 0x66, 0x79, 0x73, 0x32, 0x58, 
  0x42, 0x67, 0x31, 0x1E, 0x37, 0x79, 0x3B, 0x21, 0x4C, 0x5C, 
  0x44, 0x3D, 0x2D, 0x32, 0x23, 0x4A, 0x59, 0x57, 0x1E, 0x5A, 
  0x3C, 0x28, 0x6B, 0x4F, 0x3A, 0x51, 0x64, 0x46, 0x61, 0x35, 
  0x2B, 0x60, 0x54, 0x72, 0x6E, 0x3A, 0x1E, 0x78, 0x61, 0x6C, 
  0x4A, 0x7E, 0x68, 0x47, 0x38, 0x5F, 0x42, 0x4E, 0x53, 0x56, 
  0x5A, 0x22, 0x34, 0x61, 0x22, 0x68, 0x46, 0x50, 0x5B, 0x1E, 
  0x79, 0x45, 0x7A, 0x42, 0x2D, 0x1C, 0x5D, 0x30, 0x2B, 0x7C, 
  0x2F, 0x4D, 0x75, 0x2B, 0x61, 0x25, 0x7A, 0x60, 0x38, 0x21, 
  0x34, 0x58, 0x44, 0x35, 0x2A, 0x56, 0x5A, 0x3E]
# print(memory[0:50])
# print(memory[50:150])
# print(memory[150:250])
# print(memory[250:350])

"""
while ip < len(code):
    local = code[ip]
    if local[7] == 'b':
        #print("1", end='')
        print(reg[1])
        #print(reg)
        #exit()
    # print(local)
    op = local[0:3]
    operand0 = 0
    operand1 = 0
    if op[0] != 'j' and op != 'r':
        if local[8] == 'r' and local[12] == 'r':
            operand0 = int(local[9])
            operand1 = int(local[13])
            type = 0x00
        elif local[8] == 'r' and local[12] != 'r' and local[12] != '[':
            operand0 = int(local[9])
            operand1 = int(local[12:].strip())

            type = 0x01
        elif local[8] == '[' and local[14] == 'r':
            operand0 = int(local[10])
            operand1 = int(local[15:].strip())
            type = 0x20

        elif local[8] == 'r' and local[12] == '[':
            operand0 = int(local[9])
            operand1 = int(local[14])
            type = 0x02
        else:
            print(local)

    if op == 'mov':
        if type == 0x00:
            reg[operand0] = reg[operand1]
        elif type == 0x01:
            reg[operand0] = operand1
        elif type == 0x20:
            memory[reg[operand0]] = reg[operand1]
        elif type == 0x02:
            reg[operand0] = memory[reg[operand1]]
        else:
            print(local)
        # print("0x%02x %3d %3d"%(type,operand0,operand1)+"    "+local)
    elif op == 'cmp':
        if type == 0x00:
            reg[9] = reg[operand0] - reg[operand1]
        elif type == 0x01:
            reg[9] = reg[operand0] - operand1
        # print(local)
    elif op[0] == 'j':
        operand = jmp_map[local[8:].strip()]
        if local[0:3] == 'jmp':
            # ip = ip
            ip = operand - 1
        elif local[0:3] == 'jz ' or local[0:2] == 'je ':
            if reg[9] == 0:
                # ip = ip
                ip = operand - 1
        elif local[0:3] == 'jnz' or local[0:3] == 'jne':
            if reg[9] != 0:
                # ip = ip
                ip = operand - 1
        elif local[0:3] == 'ja ':
            if reg[9] > 0:
                # ip = ip
                ip = operand - 1
        elif local[0:3] == 'jae':
            if reg[9] >= 0:
                # ip = ip
                ip = operand - 1
        elif local[0:3] == 'jb ':
            if reg[9] < 0:
                # ip = ip
                ip = operand - 1
        elif local[0:3] == 'jbe' or local[0:3] == 'jna':
            if reg[9] < 0 or reg[9] == 0:
                # ip = ip
                ip = operand - 1
        else:
            print(local + "     ", operand)
        # elif local[0:2] == 'jg'
    else:
        op = local[0:3]
        if op == 'add':
            if type == 0x00:
                reg[operand0] += reg[operand1]
            elif type == 0x01:
                reg[operand0] += operand1
        elif op == 'sub':
            if type == 0x00:
                reg[operand0] -= reg[operand1]
            elif type == 0x01:
                reg[operand0] -= operand1
        elif op == 'imu':
            if type == 0x00:
                reg[operand0] *= reg[operand1]
            elif type == 0x01:
                reg[operand0] *= operand1
        elif op == 'idi':
            if type == 0x00:
                reg[operand0] //= reg[operand1]
            elif type == 0x01:
                reg[operand0] //= operand1
        elif op == 'mod':
            if type == 0x00:
                reg[operand0] %= reg[operand1]
            elif type == 0x01:
                reg[operand0] %= operand1
        elif op[0:2] == 'or':
            if type == 0x00:
                reg[operand0] |= reg[operand1]
            elif type == 0x01:
                reg[operand0] |= operand1
        elif op == 'and':
            if type == 0x00:
                reg[operand0] &= reg[operand1]
            elif type == 0x01:
                reg[operand0] &= operand1
        elif op == 'xor':
            if type == 0x00:
                reg[operand0] ^= reg[operand1]
            elif type == 0x01:
                reg[operand0] ^= operand1
        elif op == 'shl':
            if type == 0x00:
                reg[operand0] <<= reg[operand1]
            elif type == 0x01:
                reg[operand0] <<= operand1
        elif op == 'shr':
            if type == 0x00:
                reg[operand0] >>= reg[operand1]
            elif type == 0x01:
                reg[operand0] >>= operand1
        else:
            break
    ip += 1
s = memory[256:384]
s = "".join(list(map(chr,s)))
print(s)
#print(memory)
print(reg)
"""

tmp_code = []
for ip in range(len(code)):
    tmp = b""
    local = code[ip]
    op = local[0:3]
    operand0 = 0
    operand1 = 0
    if op[0] != 'j' and op != 'r':
        if local[8] == 'r' and local[12] == 'r':
            operand0 = int(local[9])
            operand1 = int(local[13])
            type = 0x00
        elif local[8] == 'r' and local[12] != 'r' and local[12] != '[':
            operand0 = int(local[9])
            operand1 = int(local[12:].strip())
            type = 0x01
        elif local[8] == '[' and local[14] == 'r':
            operand0 = int(local[10])
            operand1 = int(local[15:].strip())
            type = 0x20

        elif local[8] == 'r' and local[12] == '[':
            operand0 = int(local[9])
            operand1 = int(local[14])
            type = 0x02
    if op == "mov":
        tmp += b"\xCC"
        tmp += bytes([type])
        if local[8] == 'r' and local[12] != 'r' and local[12] != '[':
            tmp += bytes([operand0])
            tmp += pack("<i",operand1)
        else:
            tmp += bytes([operand0]) + bytes([operand1])
    elif op[0] == "j":
        tmp += b"\x00\x00"
        operand = jmp_map[local[8:].strip()]
        if local[0:3] == 'jmp':
            tmp += b"\x00"
        elif local[0:3] == 'jz ' or local[0:2] == 'je ':
            tmp += b"\x01"
        elif local[0:3] == 'jnz' or local[0:3] == 'jne':
            tmp += b"\x02"
        elif local[0:3] == 'ja ':
            tmp += b"\x03"
        elif local[0:3] == 'jae':
            tmp += b"\x04"
        elif local[0:3] == 'jb ':
            tmp += b"\x05"
        elif local[0:3] == 'jbe' or local[0:3] == 'jna':
            tmp += b"\x06"
        tmp += pack("<i", operand)
    elif op == 'cmp':
        tmp += b"\x30\xC0\xF6\xF8"
        tmp += bytes([type])
        if local[8] == 'r' and local[12] != 'r' and local[12] != '[':
            tmp += bytes([operand0])
            tmp += pack("<i",operand1)
        else:
            tmp += bytes([operand0]) + bytes([operand1])
    elif op == "ret":
        tmp += b"\xC3"
    else:
        tmp += b"\x06"
        if op == 'add':
            tmp += b"\x00"
        elif op == 'sub':
            tmp += b"\x01"
        elif op == 'imu':
            tmp += b"\x02"
        elif op == 'idi':
            tmp += b"\x03"
        elif op == 'mod':
            tmp += b"\x04"
        elif op[0:2] == 'or':
            tmp += b"\x05"
        elif op == 'and':
            tmp += b"\x06"
        elif op == 'xor':
            tmp += b"\x07"
        elif op == 'shl':
            tmp += b"\x08"
        elif op == 'shr':
            tmp += b"\x09"
        tmp += bytes([type])
        if local[8] == 'r' and local[12] != 'r' and local[12] != '[':
            tmp += bytes([operand0])
            tmp += pack("<i",operand1)
        else:
            tmp += bytes([operand0]) + bytes([operand1])
    tmp_code.append(tmp)

for i in range(len(code)):
    local = code[i]
    op = local[0:3]
    if op[0] == 'j':
        tmp = tmp_code[i][0:3]
        start = 0
        for j in range(i):
            start += len(tmp_code[j])
        dest = jmp_map[local[8:].strip()]
        end = 0
        for j in range(dest):
            end += len(tmp_code[j])
        tmp = tmp + pack("<i",end-start)
        t_code = tmp_code[0:i]
        t_code.append(tmp)
        t_code = t_code + tmp_code[i+1:]
        tmp_code[:] = t_code[:]
res = b""
for i in tmp_code:
    res+=i
with open('bytecode2','wb') as f:
    f.write(res)
print(len(res))
